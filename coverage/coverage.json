{
"/home/f/Projects/sirryyah/src/client/utils.ts":{"path":"/home/f/Projects/sirryyah/src/client/utils.ts","statementMap":{"1":{"start":{"line":3,"column":31},"end":{"line":3,"column":53}},"2":{"start":{"line":3,"column":37},"end":{"line":3,"column":53}},"3":{"start":{"line":6,"column":2},"end":{"line":11,"column":5}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":35}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":64}},"6":{"start":{"line":8,"column":26},"end":{"line":8,"column":63}},"7":{"start":{"line":9,"column":4},"end":{"line":9,"column":42}},"8":{"start":{"line":9,"column":26},"end":{"line":9,"column":41}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":35}},"10":{"start":{"line":15,"column":2},"end":{"line":20,"column":5}},"11":{"start":{"line":16,"column":19},"end":{"line":16,"column":35}},"12":{"start":{"line":17,"column":4},"end":{"line":17,"column":64}},"13":{"start":{"line":17,"column":26},"end":{"line":17,"column":63}},"14":{"start":{"line":18,"column":4},"end":{"line":18,"column":42}},"15":{"start":{"line":18,"column":26},"end":{"line":18,"column":41}},"16":{"start":{"line":19,"column":4},"end":{"line":19,"column":36}},"17":{"start":{"line":24,"column":15},"end":{"line":24,"column":35}},"18":{"start":{"line":25,"column":18},"end":{"line":25,"column":43}},"19":{"start":{"line":26,"column":2},"end":{"line":26,"column":30}}},"fnMap":{"1":{"name":"(anonymous_0)","line":3,"loc":{"start":{"line":3,"column":37},"end":{"line":3,"column":53}}},"2":{"name":"blobToArrayBuffer","line":5,"loc":{"start":{"line":5,"column":44},"end":{"line":12,"column":1}}},"3":{"name":"(anonymous_2)","line":6,"loc":{"start":{"line":6,"column":37},"end":{"line":11,"column":3}}},"4":{"name":"(anonymous_3)","line":8,"loc":{"start":{"line":8,"column":26},"end":{"line":8,"column":63}}},"5":{"name":"(anonymous_4)","line":9,"loc":{"start":{"line":9,"column":26},"end":{"line":9,"column":41}}},"6":{"name":"blobToString","line":14,"loc":{"start":{"line":14,"column":39},"end":{"line":21,"column":1}}},"7":{"name":"(anonymous_6)","line":15,"loc":{"start":{"line":15,"column":37},"end":{"line":20,"column":3}}},"8":{"name":"(anonymous_7)","line":17,"loc":{"start":{"line":17,"column":26},"end":{"line":17,"column":63}}},"9":{"name":"(anonymous_8)","line":18,"loc":{"start":{"line":18,"column":26},"end":{"line":18,"column":41}}},"10":{"name":"arrayBufferToString","line":23,"loc":{"start":{"line":23,"column":75},"end":{"line":27,"column":1}}}},"branchMap":{"1":{"line":23,"type":"default-arg","locations":[{"start":{"line":23,"column":68},"end":{"line":23,"column":75}}]}},"s":{"1":1,"2":0,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[1]},"f":{"1":0,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"code":"import uniqueId from 'lodash/uniqueId';\n\nexport const createMessageId = () => uniqueId('msg_');\n\nexport function blobToArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as ArrayBuffer);\n    reader.onerror = e => reject(e.error);\n    reader.readAsArrayBuffer(blob);\n  });\n}\n\nexport function blobToString(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as ArrayBuffer);\n    reader.onerror = e => reject(e.error);\n    reader.readAsBinaryString(blob);\n  });\n}\n\nexport function arrayBufferToString(buffer: ArrayBuffer, encoding = 'utf-8'): string {\n  const view = new DataView(buffer);\n  const decoder = new TextDecoder(encoding);\n  return decoder.decode(view);\n}","l":{"3":1,"6":1,"7":1,"8":1,"9":1,"10":1,"15":0,"16":0,"17":0,"18":0,"19":0,"24":1,"25":1,"26":1}},
"/home/f/Projects/sirryyah/src/client/crypto.ts":{"path":"/home/f/Projects/sirryyah/src/client/crypto.ts","statementMap":{"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":20}},"2":{"start":{"line":5,"column":19},"end":{"line":14,"column":1}},"3":{"start":{"line":16,"column":31},"end":{"line":22,"column":1}},"4":{"start":{"line":17,"column":2},"end":{"line":21,"column":30}},"5":{"start":{"line":25,"column":31},"end":{"line":36,"column":1}},"6":{"start":{"line":26,"column":2},"end":{"line":35,"column":4}},"7":{"start":{"line":38,"column":34},"end":{"line":52,"column":1}},"8":{"start":{"line":38,"column":59},"end":{"line":52,"column":1}},"9":{"start":{"line":39,"column":26},"end":{"line":39,"column":33}},"10":{"start":{"line":39,"column":14},"end":{"line":39,"column":33}},"11":{"start":{"line":40,"column":13},"end":{"line":40,"column":56}},"12":{"start":{"line":41,"column":15},"end":{"line":41,"column":72}},"13":{"start":{"line":42,"column":18},"end":{"line":45,"column":21}},"14":{"start":{"line":46,"column":2},"end":{"line":51,"column":3}},"15":{"start":{"line":54,"column":34},"end":{"line":71,"column":1}},"16":{"start":{"line":54,"column":59},"end":{"line":71,"column":1}},"17":{"start":{"line":55,"column":35},"end":{"line":55,"column":42}},"18":{"start":{"line":55,"column":23},"end":{"line":55,"column":42}},"19":{"start":{"line":56,"column":15},"end":{"line":56,"column":22}},"20":{"start":{"line":57,"column":17},"end":{"line":64,"column":3}},"21":{"start":{"line":65,"column":27},"end":{"line":65,"column":116}},"22":{"start":{"line":66,"column":2},"end":{"line":70,"column":3}}},"fnMap":{"1":{"name":"(anonymous_7)","line":16,"loc":{"start":{"line":16,"column":31},"end":{"line":22,"column":1}}},"2":{"name":"(anonymous_8)","line":25,"loc":{"start":{"line":25,"column":75},"end":{"line":36,"column":1}}},"3":{"name":"(anonymous_9)","line":38,"loc":{"start":{"line":38,"column":59},"end":{"line":52,"column":1}}},"4":{"name":"(anonymous_11)","line":54,"loc":{"start":{"line":54,"column":59},"end":{"line":71,"column":1}}}},"branchMap":{},"s":{"1":1,"2":1,"3":1,"4":3,"5":1,"6":3,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":2,"17":2,"18":2,"19":2,"20":2,"21":1,"22":1},"b":{},"f":{"1":3,"2":3,"3":2,"4":4},"code":"import { blobToArrayBuffer, arrayBufferToString } from 'client/utils';\n\nconst format = 'jwk';\n\nconst algorithms = {\n  dh: {\n    name: 'ECDH',\n    namedCurve: 'P-256', // can be 'P-256', 'P-384', or 'P-521'\n  },\n  aes: {\n    name: 'AES-GCM',\n    length: 256, // can be  128, 192, or 256\n  },\n};\n\nexport const generateKeyPair = () => {\n  return crypto.subtle.generateKey(\n    algorithms.dh,\n    true, // extractable\n    ['deriveKey'],\n  ) as Promise<CryptoKeyPair>;\n};\n\n\nexport const deriveSharedKey = (privateKey: CryptoKey, publicKey: CryptoKey) => {\n  return window.crypto.subtle.deriveKey(\n    { \n      ...algorithms.dh,\n      public: publicKey,\n    },\n    privateKey,\n    algorithms.aes,\n    true,\n    ['encrypt', 'decrypt']\n  );\n}\n\nexport const encrypt: Encryptor = async (message, sharedKey) => {\n  const { to, ...rest } = message;\n  const iv = crypto.getRandomValues(new Uint32Array(12));\n  const data = await blobToArrayBuffer(new Blob([JSON.stringify(rest)]));\n  const payload = await crypto.subtle.encrypt({\n    name: 'AES-GCM',\n    iv,\n  }, sharedKey, data);\n  return {\n    ...rest,\n    iv,\n    to,\n    payload,\n  }\n}\n\nexport const decrypt: Decryptor = async (message, sharedKey) => {\n  const { payload, iv, ...rest } = message;\n  const data = payload;\n  const buffer = await crypto.subtle.decrypt(\n    {\n      name: algorithms.aes.name,\n      iv,\n    },\n    sharedKey,\n    data,\n  );\n  const decryptedPayload = JSON.parse(arrayBufferToString(buffer)) as Partial<LocalMessage<'incoming', 'decrypted'>>;\n  return {\n    ...decryptedPayload,\n    ...rest,\n    status: 'unread',\n  }\n}\n","l":{"3":1,"5":1,"16":1,"17":3,"25":1,"26":3,"38":1,"39":1,"40":1,"41":1,"42":1,"46":1,"54":2,"55":2,"56":2,"57":2,"65":1,"66":1}}}
